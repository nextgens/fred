buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
        classpath files('lib/gradle-witness.jar')
    }
}

configurations {
    provided
    compile
}

apply plugin: 'witness'
apply plugin: 'java'

repositories {
    jcenter()
    mavenLocal() // TODO: use lib/ instead?
    ivy {
        url 'https://downloads.freenetproject.org/'
        layout 'pattern', {
            artifact '/latest/[module][revision].[ext]'
        }
    }
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
}

sourceSets {
    main {
        java {
            srcDir 'src/'
        }
    }
    test {
        java {
            srcDir 'test/'
        }
    }
}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    archivesBaseName = "freenet-without-version"
}

def gitrev
def version_buildir
def version_src
task buildInfo {
    try {
        def cmd = "git describe --always --abbrev=4 --dirty"
        def proc = cmd.execute()
        gitrev = proc.text.trim()
        version_buildir = "$projectDir/build/tmp/compileVersion/"
        version_src = 'freenet/node/Version.java'
    } catch (java.io.IOException e) {
        gitrev = "@unknown@"
    }
}

task compileVersion (type: JavaCompile) {
    copy {
        from sourceSets.main.java.srcDirs
        into "${version_buildir}"
        include "${version_src}"
        filter {
            String line -> line.replaceAll("@custom@","${gitrev}")
        }
    }
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    source = "${version_buildir}"
    include "${version_src}"
    classpath = files(sourceSets.main.compileClasspath, sourceSets.main.output.classesDir)
    destinationDir = file("${version_buildir}")
}
compileVersion.dependsOn buildInfo
processResources.dependsOn compileVersion

task jarWithVersion(type: Jar) {
    archiveName = "freenet.jar"
    from (zipTree("$projectDir/build/libs/freenet-without-version.jar")) {
        exclude 'freenet/node/Version.class'
        exclude 'freenet/node/Version$1.class'
    }
    from ("${version_buildir}") {
        include 'freenet/node/Version**class'
    }
}

jar {
    manifest {
        attributes("Permissions": "all-permissions")
        attributes("Application-Name": "Freenet REference Daemon")
        attributes("Required-Ext-Version": 29)
        attributes("Recommended-Ext-Version": 29)
        attributes("Compiled-With": "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})")
        attributes([
                       "Specification-Title": "Freenet",
                       "Specification-Version": "0.7.5",
                       "Specification-Vendor": "freenetproject.org",
                       "Implementation-Title": "Freenet",
                       "Implementation-Version": "0.7.5 ${gitrev}",
                       "Implementation-Vendor": "freenetproject.org",
                   ], "common")
    }
    doLast {
        jarWithVersion.execute()
    }
}
jar.dependsOn buildInfo

task copyResourcesToClasses2 {
    inputs.dir sourceSets.main.java.srcDirs
    outputs.dir sourceSets.main.output.classesDir
    doLast {
        copy {
            from sourceSets.main.java.srcDirs
            into sourceSets.main.output.classesDir
            include 'freenet/l10n/*properties'
            include 'freenet/l10n/iso-*.tab'
            include 'freenet/clients/http/staticfiles/**'
            include '../dependencies.properties'
        }
        copy {
            from "${projectDir}/"
            into sourceSets.main.output.classesDir
            include 'dependencies.properties'
        }
    }
}
processResources.dependsOn copyResourcesToClasses2

task copyTestResourcesToClasses2 {
    inputs.dir sourceSets.test.java.srcDirs
    outputs.dir sourceSets.test.output.classesDir
    doLast {
        copy {
	    from sourceSets.test.java.srcDirs
	    into sourceSets.test.output.classesDir
            include 'freenet/client/filter/*/**'
            include 'freenet/crypt/ciphers/rijndael-gladman-test-data/**'
            include 'freenet/l10n/*properties'
        }
    }
}
compileTestJava.dependsOn copyResourcesToClasses2
compileTestJava.dependsOn copyTestResourcesToClasses2

test {
    minHeapSize = "128m"
    maxHeapSize = "512m"
    // no inner class
    include '**/*Test.class'
    exclude '**/*$*Test.class'
    workingDir = sourceSets.test.output.classesDir
    scanForTestClasses = false
    systemProperties += [
        "test.l10npath_test": "freenet/l10n/",
        "test.l10npath_main": "../main/freenet/l10n/",
//	"test.extensive":
//	"test.verbose":
	"test.benchmark": true
    ]
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile "org.bouncycastle:bcprov-jdk15on:1.54"
    compile "net.java.dev.jna:jna:4.2.2"
    compile "org.freenetproject:freenet-ext@jar"

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "org.hamcrest:hamcrest-library:1.3"
}

dependencyVerification {
    // testCompile includes all of compile deps... so let's include only these
    includedConfigurations = [configurations.testCompile]
    verify = [
        'org.bouncycastle:bcprov-jdk15on:d0ae14598f9c528d2ab7bb8ed00e785a5440f692712cd362d69328aba25efb57',
        'net.java.dev.jna:jna:1f38af54e06c6e6f6dbf39ba2c052b952dea5dddb4871127b34639ddeb11bdbe',
        'org.freenetproject:freenet-ext:32f2b3d6beedf54137ea2f9a3ebef67666d769f0966b08cd17fd7db59ba4d79f',
        'junit:junit:59721f0805e223d84b90677887d9ff567dc534d7c502ca903c0c2b17f05c116a',
        'org.mockito:mockito-core:f97483ba0944b9fa133aa29638764ddbeadb51ec3dbc02074c58fa2caecd07fa',
        'org.hamcrest:hamcrest-library:711d64522f9ec410983bd310934296da134be4254a125080a0416ec178dfad1c',
        'org.hamcrest:hamcrest-core:66fdef91e9739348df7a096aa384a5685f4e875584cce89386a7a47251c4d8e9',
        'org.objenesis:objenesis:c5694b55d92527479382f254199b3c6b1d8780f652ad61e9ca59919887f491a8',
    ]
}
